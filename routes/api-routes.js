const router = require('express').Router();
const { v4: uuidv4 } = require('uuid');
const fs = require("fs");

// Route to handle GET request to '/api/notes' endpoint
router.get('/api/notes', async (req, res) => {
  // Read and parse the content of 'db.json' file
  const dbJson = await JSON.parse(fs.readFileSync("db/db.json", "utf8"));
  // Send the parsed JSON data as the response
  res.json(dbJson);
});

// Route to handle POST request to '/api/notes' endpoint
router.post('/api/notes', (req, res) => {
  // Read and parse the content of 'db.json' file
  const dbJson = JSON.parse(fs.readFileSync("db/db.json", "utf8"));
  // Create a new note object with title, text, and a unique id generated by uuidv4
  const newFeedback = {
    title: req.body.title,
    text: req.body.text,
    id: uuidv4(),
  };
  // Push the new note object to the existing array of notes
  dbJson.push(newFeedback);
  // Write the updated array of notes back to 'db.json' file
  fs.writeFileSync("db/db.json", JSON.stringify(dbJson));
  // Send the updated array of notes as the response
  res.json(dbJson);
});

// Route to handle DELETE request to '/api/notes/:id' endpoint
router.delete('/api/notes/:id', (req, res) => {
  // Read the content of 'db.json' file
  let data = fs.readFileSync("db/db.json", "utf8");
  // Parse the JSON data
  const dataJSON = JSON.parse(data);
  // Filter out the note with the specified id
  const newNotes = dataJSON.filter((note) => {
    return note.id !== req.params.id;
  });
  // Write the updated array of notes back to 'db.json' file
  fs.writeFileSync("db/db.json", JSON.stringify(newNotes));
  // Send a confirmation message as the response
  res.json("Note deleted.");
});

module.exports = router; 
